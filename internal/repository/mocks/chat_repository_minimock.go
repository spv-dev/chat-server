// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/spv-dev/chat-server/internal/repository.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/spv-dev/chat-server/internal/model"
)

// ChatRepositoryMock implements mm_repository.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddUsersToChat          func(ctx context.Context, chatID int64, userIDs []int64) (err error)
	funcAddUsersToChatOrigin    string
	inspectFuncAddUsersToChat   func(ctx context.Context, chatID int64, userIDs []int64)
	afterAddUsersToChatCounter  uint64
	beforeAddUsersToChatCounter uint64
	AddUsersToChatMock          mChatRepositoryMockAddUsersToChat

	funcCreateChat          func(ctx context.Context, info *model.ChatInfo) (i1 int64, err error)
	funcCreateChatOrigin    string
	inspectFuncCreateChat   func(ctx context.Context, info *model.ChatInfo)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mChatRepositoryMockCreateChat

	funcDeleteChat          func(ctx context.Context, id int64) (err error)
	funcDeleteChatOrigin    string
	inspectFuncDeleteChat   func(ctx context.Context, id int64)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mChatRepositoryMockDeleteChat

	funcGetChatMessages          func(ctx context.Context, id int64) (mpa1 []*model.Message, err error)
	funcGetChatMessagesOrigin    string
	inspectFuncGetChatMessages   func(ctx context.Context, id int64)
	afterGetChatMessagesCounter  uint64
	beforeGetChatMessagesCounter uint64
	GetChatMessagesMock          mChatRepositoryMockGetChatMessages

	funcSendMessage          func(ctx context.Context, info *model.MessageInfo) (err error)
	funcSendMessageOrigin    string
	inspectFuncSendMessage   func(ctx context.Context, info *model.MessageInfo)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mChatRepositoryMockSendMessage
}

// NewChatRepositoryMock returns a mock for mm_repository.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddUsersToChatMock = mChatRepositoryMockAddUsersToChat{mock: m}
	m.AddUsersToChatMock.callArgs = []*ChatRepositoryMockAddUsersToChatParams{}

	m.CreateChatMock = mChatRepositoryMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*ChatRepositoryMockCreateChatParams{}

	m.DeleteChatMock = mChatRepositoryMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*ChatRepositoryMockDeleteChatParams{}

	m.GetChatMessagesMock = mChatRepositoryMockGetChatMessages{mock: m}
	m.GetChatMessagesMock.callArgs = []*ChatRepositoryMockGetChatMessagesParams{}

	m.SendMessageMock = mChatRepositoryMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*ChatRepositoryMockSendMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockAddUsersToChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockAddUsersToChatExpectation
	expectations       []*ChatRepositoryMockAddUsersToChatExpectation

	callArgs []*ChatRepositoryMockAddUsersToChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockAddUsersToChatExpectation specifies expectation struct of the ChatRepository.AddUsersToChat
type ChatRepositoryMockAddUsersToChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockAddUsersToChatParams
	paramPtrs          *ChatRepositoryMockAddUsersToChatParamPtrs
	expectationOrigins ChatRepositoryMockAddUsersToChatExpectationOrigins
	results            *ChatRepositoryMockAddUsersToChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockAddUsersToChatParams contains parameters of the ChatRepository.AddUsersToChat
type ChatRepositoryMockAddUsersToChatParams struct {
	ctx     context.Context
	chatID  int64
	userIDs []int64
}

// ChatRepositoryMockAddUsersToChatParamPtrs contains pointers to parameters of the ChatRepository.AddUsersToChat
type ChatRepositoryMockAddUsersToChatParamPtrs struct {
	ctx     *context.Context
	chatID  *int64
	userIDs *[]int64
}

// ChatRepositoryMockAddUsersToChatResults contains results of the ChatRepository.AddUsersToChat
type ChatRepositoryMockAddUsersToChatResults struct {
	err error
}

// ChatRepositoryMockAddUsersToChatOrigins contains origins of expectations of the ChatRepository.AddUsersToChat
type ChatRepositoryMockAddUsersToChatExpectationOrigins struct {
	origin        string
	originCtx     string
	originChatID  string
	originUserIDs string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) Optional() *mChatRepositoryMockAddUsersToChat {
	mmAddUsersToChat.optional = true
	return mmAddUsersToChat
}

// Expect sets up expected params for ChatRepository.AddUsersToChat
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) Expect(ctx context.Context, chatID int64, userIDs []int64) *mChatRepositoryMockAddUsersToChat {
	if mmAddUsersToChat.mock.funcAddUsersToChat != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by Set")
	}

	if mmAddUsersToChat.defaultExpectation == nil {
		mmAddUsersToChat.defaultExpectation = &ChatRepositoryMockAddUsersToChatExpectation{}
	}

	if mmAddUsersToChat.defaultExpectation.paramPtrs != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by ExpectParams functions")
	}

	mmAddUsersToChat.defaultExpectation.params = &ChatRepositoryMockAddUsersToChatParams{ctx, chatID, userIDs}
	mmAddUsersToChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddUsersToChat.expectations {
		if minimock.Equal(e.params, mmAddUsersToChat.defaultExpectation.params) {
			mmAddUsersToChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddUsersToChat.defaultExpectation.params)
		}
	}

	return mmAddUsersToChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.AddUsersToChat
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockAddUsersToChat {
	if mmAddUsersToChat.mock.funcAddUsersToChat != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by Set")
	}

	if mmAddUsersToChat.defaultExpectation == nil {
		mmAddUsersToChat.defaultExpectation = &ChatRepositoryMockAddUsersToChatExpectation{}
	}

	if mmAddUsersToChat.defaultExpectation.params != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by Expect")
	}

	if mmAddUsersToChat.defaultExpectation.paramPtrs == nil {
		mmAddUsersToChat.defaultExpectation.paramPtrs = &ChatRepositoryMockAddUsersToChatParamPtrs{}
	}
	mmAddUsersToChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddUsersToChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddUsersToChat
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.AddUsersToChat
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) ExpectChatIDParam2(chatID int64) *mChatRepositoryMockAddUsersToChat {
	if mmAddUsersToChat.mock.funcAddUsersToChat != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by Set")
	}

	if mmAddUsersToChat.defaultExpectation == nil {
		mmAddUsersToChat.defaultExpectation = &ChatRepositoryMockAddUsersToChatExpectation{}
	}

	if mmAddUsersToChat.defaultExpectation.params != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by Expect")
	}

	if mmAddUsersToChat.defaultExpectation.paramPtrs == nil {
		mmAddUsersToChat.defaultExpectation.paramPtrs = &ChatRepositoryMockAddUsersToChatParamPtrs{}
	}
	mmAddUsersToChat.defaultExpectation.paramPtrs.chatID = &chatID
	mmAddUsersToChat.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmAddUsersToChat
}

// ExpectUserIDsParam3 sets up expected param userIDs for ChatRepository.AddUsersToChat
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) ExpectUserIDsParam3(userIDs []int64) *mChatRepositoryMockAddUsersToChat {
	if mmAddUsersToChat.mock.funcAddUsersToChat != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by Set")
	}

	if mmAddUsersToChat.defaultExpectation == nil {
		mmAddUsersToChat.defaultExpectation = &ChatRepositoryMockAddUsersToChatExpectation{}
	}

	if mmAddUsersToChat.defaultExpectation.params != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by Expect")
	}

	if mmAddUsersToChat.defaultExpectation.paramPtrs == nil {
		mmAddUsersToChat.defaultExpectation.paramPtrs = &ChatRepositoryMockAddUsersToChatParamPtrs{}
	}
	mmAddUsersToChat.defaultExpectation.paramPtrs.userIDs = &userIDs
	mmAddUsersToChat.defaultExpectation.expectationOrigins.originUserIDs = minimock.CallerInfo(1)

	return mmAddUsersToChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.AddUsersToChat
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) Inspect(f func(ctx context.Context, chatID int64, userIDs []int64)) *mChatRepositoryMockAddUsersToChat {
	if mmAddUsersToChat.mock.inspectFuncAddUsersToChat != nil {
		mmAddUsersToChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.AddUsersToChat")
	}

	mmAddUsersToChat.mock.inspectFuncAddUsersToChat = f

	return mmAddUsersToChat
}

// Return sets up results that will be returned by ChatRepository.AddUsersToChat
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) Return(err error) *ChatRepositoryMock {
	if mmAddUsersToChat.mock.funcAddUsersToChat != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by Set")
	}

	if mmAddUsersToChat.defaultExpectation == nil {
		mmAddUsersToChat.defaultExpectation = &ChatRepositoryMockAddUsersToChatExpectation{mock: mmAddUsersToChat.mock}
	}
	mmAddUsersToChat.defaultExpectation.results = &ChatRepositoryMockAddUsersToChatResults{err}
	mmAddUsersToChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddUsersToChat.mock
}

// Set uses given function f to mock the ChatRepository.AddUsersToChat method
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) Set(f func(ctx context.Context, chatID int64, userIDs []int64) (err error)) *ChatRepositoryMock {
	if mmAddUsersToChat.defaultExpectation != nil {
		mmAddUsersToChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.AddUsersToChat method")
	}

	if len(mmAddUsersToChat.expectations) > 0 {
		mmAddUsersToChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.AddUsersToChat method")
	}

	mmAddUsersToChat.mock.funcAddUsersToChat = f
	mmAddUsersToChat.mock.funcAddUsersToChatOrigin = minimock.CallerInfo(1)
	return mmAddUsersToChat.mock
}

// When sets expectation for the ChatRepository.AddUsersToChat which will trigger the result defined by the following
// Then helper
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) When(ctx context.Context, chatID int64, userIDs []int64) *ChatRepositoryMockAddUsersToChatExpectation {
	if mmAddUsersToChat.mock.funcAddUsersToChat != nil {
		mmAddUsersToChat.mock.t.Fatalf("ChatRepositoryMock.AddUsersToChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockAddUsersToChatExpectation{
		mock:               mmAddUsersToChat.mock,
		params:             &ChatRepositoryMockAddUsersToChatParams{ctx, chatID, userIDs},
		expectationOrigins: ChatRepositoryMockAddUsersToChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddUsersToChat.expectations = append(mmAddUsersToChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.AddUsersToChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockAddUsersToChatExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockAddUsersToChatResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.AddUsersToChat should be invoked
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) Times(n uint64) *mChatRepositoryMockAddUsersToChat {
	if n == 0 {
		mmAddUsersToChat.mock.t.Fatalf("Times of ChatRepositoryMock.AddUsersToChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddUsersToChat.expectedInvocations, n)
	mmAddUsersToChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddUsersToChat
}

func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) invocationsDone() bool {
	if len(mmAddUsersToChat.expectations) == 0 && mmAddUsersToChat.defaultExpectation == nil && mmAddUsersToChat.mock.funcAddUsersToChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddUsersToChat.mock.afterAddUsersToChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddUsersToChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddUsersToChat implements mm_repository.ChatRepository
func (mmAddUsersToChat *ChatRepositoryMock) AddUsersToChat(ctx context.Context, chatID int64, userIDs []int64) (err error) {
	mm_atomic.AddUint64(&mmAddUsersToChat.beforeAddUsersToChatCounter, 1)
	defer mm_atomic.AddUint64(&mmAddUsersToChat.afterAddUsersToChatCounter, 1)

	mmAddUsersToChat.t.Helper()

	if mmAddUsersToChat.inspectFuncAddUsersToChat != nil {
		mmAddUsersToChat.inspectFuncAddUsersToChat(ctx, chatID, userIDs)
	}

	mm_params := ChatRepositoryMockAddUsersToChatParams{ctx, chatID, userIDs}

	// Record call args
	mmAddUsersToChat.AddUsersToChatMock.mutex.Lock()
	mmAddUsersToChat.AddUsersToChatMock.callArgs = append(mmAddUsersToChat.AddUsersToChatMock.callArgs, &mm_params)
	mmAddUsersToChat.AddUsersToChatMock.mutex.Unlock()

	for _, e := range mmAddUsersToChat.AddUsersToChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddUsersToChat.AddUsersToChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddUsersToChat.AddUsersToChatMock.defaultExpectation.Counter, 1)
		mm_want := mmAddUsersToChat.AddUsersToChatMock.defaultExpectation.params
		mm_want_ptrs := mmAddUsersToChat.AddUsersToChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockAddUsersToChatParams{ctx, chatID, userIDs}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddUsersToChat.t.Errorf("ChatRepositoryMock.AddUsersToChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUsersToChat.AddUsersToChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmAddUsersToChat.t.Errorf("ChatRepositoryMock.AddUsersToChat got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUsersToChat.AddUsersToChatMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

			if mm_want_ptrs.userIDs != nil && !minimock.Equal(*mm_want_ptrs.userIDs, mm_got.userIDs) {
				mmAddUsersToChat.t.Errorf("ChatRepositoryMock.AddUsersToChat got unexpected parameter userIDs, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUsersToChat.AddUsersToChatMock.defaultExpectation.expectationOrigins.originUserIDs, *mm_want_ptrs.userIDs, mm_got.userIDs, minimock.Diff(*mm_want_ptrs.userIDs, mm_got.userIDs))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddUsersToChat.t.Errorf("ChatRepositoryMock.AddUsersToChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddUsersToChat.AddUsersToChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddUsersToChat.AddUsersToChatMock.defaultExpectation.results
		if mm_results == nil {
			mmAddUsersToChat.t.Fatal("No results are set for the ChatRepositoryMock.AddUsersToChat")
		}
		return (*mm_results).err
	}
	if mmAddUsersToChat.funcAddUsersToChat != nil {
		return mmAddUsersToChat.funcAddUsersToChat(ctx, chatID, userIDs)
	}
	mmAddUsersToChat.t.Fatalf("Unexpected call to ChatRepositoryMock.AddUsersToChat. %v %v %v", ctx, chatID, userIDs)
	return
}

// AddUsersToChatAfterCounter returns a count of finished ChatRepositoryMock.AddUsersToChat invocations
func (mmAddUsersToChat *ChatRepositoryMock) AddUsersToChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUsersToChat.afterAddUsersToChatCounter)
}

// AddUsersToChatBeforeCounter returns a count of ChatRepositoryMock.AddUsersToChat invocations
func (mmAddUsersToChat *ChatRepositoryMock) AddUsersToChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUsersToChat.beforeAddUsersToChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.AddUsersToChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddUsersToChat *mChatRepositoryMockAddUsersToChat) Calls() []*ChatRepositoryMockAddUsersToChatParams {
	mmAddUsersToChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockAddUsersToChatParams, len(mmAddUsersToChat.callArgs))
	copy(argCopy, mmAddUsersToChat.callArgs)

	mmAddUsersToChat.mutex.RUnlock()

	return argCopy
}

// MinimockAddUsersToChatDone returns true if the count of the AddUsersToChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockAddUsersToChatDone() bool {
	if m.AddUsersToChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddUsersToChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddUsersToChatMock.invocationsDone()
}

// MinimockAddUsersToChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockAddUsersToChatInspect() {
	for _, e := range m.AddUsersToChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.AddUsersToChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddUsersToChatCounter := mm_atomic.LoadUint64(&m.afterAddUsersToChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddUsersToChatMock.defaultExpectation != nil && afterAddUsersToChatCounter < 1 {
		if m.AddUsersToChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.AddUsersToChat at\n%s", m.AddUsersToChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.AddUsersToChat at\n%s with params: %#v", m.AddUsersToChatMock.defaultExpectation.expectationOrigins.origin, *m.AddUsersToChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddUsersToChat != nil && afterAddUsersToChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.AddUsersToChat at\n%s", m.funcAddUsersToChatOrigin)
	}

	if !m.AddUsersToChatMock.invocationsDone() && afterAddUsersToChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.AddUsersToChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddUsersToChatMock.expectedInvocations), m.AddUsersToChatMock.expectedInvocationsOrigin, afterAddUsersToChatCounter)
	}
}

type mChatRepositoryMockCreateChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateChatExpectation
	expectations       []*ChatRepositoryMockCreateChatExpectation

	callArgs []*ChatRepositoryMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateChatExpectation specifies expectation struct of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateChatParams
	paramPtrs          *ChatRepositoryMockCreateChatParamPtrs
	expectationOrigins ChatRepositoryMockCreateChatExpectationOrigins
	results            *ChatRepositoryMockCreateChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateChatParams contains parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParams struct {
	ctx  context.Context
	info *model.ChatInfo
}

// ChatRepositoryMockCreateChatParamPtrs contains pointers to parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParamPtrs struct {
	ctx  *context.Context
	info **model.ChatInfo
}

// ChatRepositoryMockCreateChatResults contains results of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatResults struct {
	i1  int64
	err error
}

// ChatRepositoryMockCreateChatOrigins contains origins of expectations of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectationOrigins struct {
	origin     string
	originCtx  string
	originInfo string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mChatRepositoryMockCreateChat) Optional() *mChatRepositoryMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Expect(ctx context.Context, info *model.ChatInfo) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &ChatRepositoryMockCreateChatParams{ctx, info}
	mmCreateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateChat
}

// ExpectInfoParam2 sets up expected param info for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectInfoParam2(info *model.ChatInfo) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.info = &info
	mmCreateChat.defaultExpectation.expectationOrigins.originInfo = minimock.CallerInfo(1)

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Inspect(f func(ctx context.Context, info *model.ChatInfo)) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &ChatRepositoryMockCreateChatResults{i1, err}
	mmCreateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// Set uses given function f to mock the ChatRepository.CreateChat method
func (mmCreateChat *mChatRepositoryMockCreateChat) Set(f func(ctx context.Context, info *model.ChatInfo) (i1 int64, err error)) *ChatRepositoryMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	mmCreateChat.mock.funcCreateChatOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// When sets expectation for the ChatRepository.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mChatRepositoryMockCreateChat) When(ctx context.Context, info *model.ChatInfo) *ChatRepositoryMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateChatExpectation{
		mock:               mmCreateChat.mock,
		params:             &ChatRepositoryMockCreateChatParams{ctx, info},
		expectationOrigins: ChatRepositoryMockCreateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateChatExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateChatResults{i1, err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateChat should be invoked
func (mmCreateChat *mChatRepositoryMockCreateChat) Times(n uint64) *mChatRepositoryMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of ChatRepositoryMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	mmCreateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateChat
}

func (mmCreateChat *mChatRepositoryMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements mm_repository.ChatRepository
func (mmCreateChat *ChatRepositoryMock) CreateChat(ctx context.Context, info *model.ChatInfo) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	mmCreateChat.t.Helper()

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, info)
	}

	mm_params := ChatRepositoryMockCreateChatParams{ctx, info}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateChatParams{ctx, info}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.info != nil && !minimock.Equal(*mm_want_ptrs.info, mm_got.info) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter info, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originInfo, *mm_want_ptrs.info, mm_got.info, minimock.Diff(*mm_want_ptrs.info, mm_got.info))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the ChatRepositoryMock.CreateChat")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, info)
	}
	mmCreateChat.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateChat. %v %v", ctx, info)
	return
}

// CreateChatAfterCounter returns a count of finished ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mChatRepositoryMockCreateChat) Calls() []*ChatRepositoryMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.CreateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", m.CreateChatMock.defaultExpectation.expectationOrigins.origin, *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.funcCreateChatOrigin)
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), m.CreateChatMock.expectedInvocationsOrigin, afterCreateChatCounter)
	}
}

type mChatRepositoryMockDeleteChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockDeleteChatExpectation
	expectations       []*ChatRepositoryMockDeleteChatExpectation

	callArgs []*ChatRepositoryMockDeleteChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockDeleteChatExpectation specifies expectation struct of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockDeleteChatParams
	paramPtrs          *ChatRepositoryMockDeleteChatParamPtrs
	expectationOrigins ChatRepositoryMockDeleteChatExpectationOrigins
	results            *ChatRepositoryMockDeleteChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockDeleteChatParams contains parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParams struct {
	ctx context.Context
	id  int64
}

// ChatRepositoryMockDeleteChatParamPtrs contains pointers to parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// ChatRepositoryMockDeleteChatResults contains results of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatResults struct {
	err error
}

// ChatRepositoryMockDeleteChatOrigins contains origins of expectations of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Optional() *mChatRepositoryMockDeleteChat {
	mmDeleteChat.optional = true
	return mmDeleteChat
}

// Expect sets up expected params for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Expect(ctx context.Context, id int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.paramPtrs != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by ExpectParams functions")
	}

	mmDeleteChat.defaultExpectation.params = &ChatRepositoryMockDeleteChatParams{ctx, id}
	mmDeleteChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteChat
}

// ExpectIdParam2 sets up expected param id for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectIdParam2(id int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.id = &id
	mmDeleteChat.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Inspect(f func(ctx context.Context, id int64)) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Return(err error) *ChatRepositoryMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &ChatRepositoryMockDeleteChatResults{err}
	mmDeleteChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// Set uses given function f to mock the ChatRepository.DeleteChat method
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Set(f func(ctx context.Context, id int64) (err error)) *ChatRepositoryMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	mmDeleteChat.mock.funcDeleteChatOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// When sets expectation for the ChatRepository.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mChatRepositoryMockDeleteChat) When(ctx context.Context, id int64) *ChatRepositoryMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockDeleteChatExpectation{
		mock:               mmDeleteChat.mock,
		params:             &ChatRepositoryMockDeleteChatParams{ctx, id},
		expectationOrigins: ChatRepositoryMockDeleteChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.DeleteChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockDeleteChatExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockDeleteChatResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.DeleteChat should be invoked
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Times(n uint64) *mChatRepositoryMockDeleteChat {
	if n == 0 {
		mmDeleteChat.mock.t.Fatalf("Times of ChatRepositoryMock.DeleteChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteChat.expectedInvocations, n)
	mmDeleteChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteChat
}

func (mmDeleteChat *mChatRepositoryMockDeleteChat) invocationsDone() bool {
	if len(mmDeleteChat.expectations) == 0 && mmDeleteChat.defaultExpectation == nil && mmDeleteChat.mock.funcDeleteChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteChat.mock.afterDeleteChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteChat implements mm_repository.ChatRepository
func (mmDeleteChat *ChatRepositoryMock) DeleteChat(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	mmDeleteChat.t.Helper()

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, id)
	}

	mm_params := ChatRepositoryMockDeleteChatParams{ctx, id}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteChat.DeleteChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockDeleteChatParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the ChatRepositoryMock.DeleteChat")
		}
		return (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, id)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to ChatRepositoryMock.DeleteChat. %v %v", ctx, id)
	return
}

// DeleteChatAfterCounter returns a count of finished ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Calls() []*ChatRepositoryMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockDeleteChatDone() bool {
	if m.DeleteChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteChatMock.invocationsDone()
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteChatCounter := mm_atomic.LoadUint64(&m.afterDeleteChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && afterDeleteChatCounter < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.DeleteChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", m.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && afterDeleteChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.funcDeleteChatOrigin)
	}

	if !m.DeleteChatMock.invocationsDone() && afterDeleteChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.DeleteChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteChatMock.expectedInvocations), m.DeleteChatMock.expectedInvocationsOrigin, afterDeleteChatCounter)
	}
}

type mChatRepositoryMockGetChatMessages struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockGetChatMessagesExpectation
	expectations       []*ChatRepositoryMockGetChatMessagesExpectation

	callArgs []*ChatRepositoryMockGetChatMessagesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockGetChatMessagesExpectation specifies expectation struct of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockGetChatMessagesParams
	paramPtrs          *ChatRepositoryMockGetChatMessagesParamPtrs
	expectationOrigins ChatRepositoryMockGetChatMessagesExpectationOrigins
	results            *ChatRepositoryMockGetChatMessagesResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockGetChatMessagesParams contains parameters of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesParams struct {
	ctx context.Context
	id  int64
}

// ChatRepositoryMockGetChatMessagesParamPtrs contains pointers to parameters of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// ChatRepositoryMockGetChatMessagesResults contains results of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesResults struct {
	mpa1 []*model.Message
	err  error
}

// ChatRepositoryMockGetChatMessagesOrigins contains origins of expectations of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Optional() *mChatRepositoryMockGetChatMessages {
	mmGetChatMessages.optional = true
	return mmGetChatMessages
}

// Expect sets up expected params for ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Expect(ctx context.Context, id int64) *mChatRepositoryMockGetChatMessages {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	if mmGetChatMessages.defaultExpectation == nil {
		mmGetChatMessages.defaultExpectation = &ChatRepositoryMockGetChatMessagesExpectation{}
	}

	if mmGetChatMessages.defaultExpectation.paramPtrs != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by ExpectParams functions")
	}

	mmGetChatMessages.defaultExpectation.params = &ChatRepositoryMockGetChatMessagesParams{ctx, id}
	mmGetChatMessages.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetChatMessages.expectations {
		if minimock.Equal(e.params, mmGetChatMessages.defaultExpectation.params) {
			mmGetChatMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChatMessages.defaultExpectation.params)
		}
	}

	return mmGetChatMessages
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockGetChatMessages {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	if mmGetChatMessages.defaultExpectation == nil {
		mmGetChatMessages.defaultExpectation = &ChatRepositoryMockGetChatMessagesExpectation{}
	}

	if mmGetChatMessages.defaultExpectation.params != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Expect")
	}

	if mmGetChatMessages.defaultExpectation.paramPtrs == nil {
		mmGetChatMessages.defaultExpectation.paramPtrs = &ChatRepositoryMockGetChatMessagesParamPtrs{}
	}
	mmGetChatMessages.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetChatMessages.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetChatMessages
}

// ExpectIdParam2 sets up expected param id for ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) ExpectIdParam2(id int64) *mChatRepositoryMockGetChatMessages {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	if mmGetChatMessages.defaultExpectation == nil {
		mmGetChatMessages.defaultExpectation = &ChatRepositoryMockGetChatMessagesExpectation{}
	}

	if mmGetChatMessages.defaultExpectation.params != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Expect")
	}

	if mmGetChatMessages.defaultExpectation.paramPtrs == nil {
		mmGetChatMessages.defaultExpectation.paramPtrs = &ChatRepositoryMockGetChatMessagesParamPtrs{}
	}
	mmGetChatMessages.defaultExpectation.paramPtrs.id = &id
	mmGetChatMessages.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmGetChatMessages
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Inspect(f func(ctx context.Context, id int64)) *mChatRepositoryMockGetChatMessages {
	if mmGetChatMessages.mock.inspectFuncGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.GetChatMessages")
	}

	mmGetChatMessages.mock.inspectFuncGetChatMessages = f

	return mmGetChatMessages
}

// Return sets up results that will be returned by ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Return(mpa1 []*model.Message, err error) *ChatRepositoryMock {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	if mmGetChatMessages.defaultExpectation == nil {
		mmGetChatMessages.defaultExpectation = &ChatRepositoryMockGetChatMessagesExpectation{mock: mmGetChatMessages.mock}
	}
	mmGetChatMessages.defaultExpectation.results = &ChatRepositoryMockGetChatMessagesResults{mpa1, err}
	mmGetChatMessages.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetChatMessages.mock
}

// Set uses given function f to mock the ChatRepository.GetChatMessages method
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Set(f func(ctx context.Context, id int64) (mpa1 []*model.Message, err error)) *ChatRepositoryMock {
	if mmGetChatMessages.defaultExpectation != nil {
		mmGetChatMessages.mock.t.Fatalf("Default expectation is already set for the ChatRepository.GetChatMessages method")
	}

	if len(mmGetChatMessages.expectations) > 0 {
		mmGetChatMessages.mock.t.Fatalf("Some expectations are already set for the ChatRepository.GetChatMessages method")
	}

	mmGetChatMessages.mock.funcGetChatMessages = f
	mmGetChatMessages.mock.funcGetChatMessagesOrigin = minimock.CallerInfo(1)
	return mmGetChatMessages.mock
}

// When sets expectation for the ChatRepository.GetChatMessages which will trigger the result defined by the following
// Then helper
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) When(ctx context.Context, id int64) *ChatRepositoryMockGetChatMessagesExpectation {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	expectation := &ChatRepositoryMockGetChatMessagesExpectation{
		mock:               mmGetChatMessages.mock,
		params:             &ChatRepositoryMockGetChatMessagesParams{ctx, id},
		expectationOrigins: ChatRepositoryMockGetChatMessagesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetChatMessages.expectations = append(mmGetChatMessages.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.GetChatMessages return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockGetChatMessagesExpectation) Then(mpa1 []*model.Message, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockGetChatMessagesResults{mpa1, err}
	return e.mock
}

// Times sets number of times ChatRepository.GetChatMessages should be invoked
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Times(n uint64) *mChatRepositoryMockGetChatMessages {
	if n == 0 {
		mmGetChatMessages.mock.t.Fatalf("Times of ChatRepositoryMock.GetChatMessages mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetChatMessages.expectedInvocations, n)
	mmGetChatMessages.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetChatMessages
}

func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) invocationsDone() bool {
	if len(mmGetChatMessages.expectations) == 0 && mmGetChatMessages.defaultExpectation == nil && mmGetChatMessages.mock.funcGetChatMessages == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetChatMessages.mock.afterGetChatMessagesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetChatMessages.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetChatMessages implements mm_repository.ChatRepository
func (mmGetChatMessages *ChatRepositoryMock) GetChatMessages(ctx context.Context, id int64) (mpa1 []*model.Message, err error) {
	mm_atomic.AddUint64(&mmGetChatMessages.beforeGetChatMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChatMessages.afterGetChatMessagesCounter, 1)

	mmGetChatMessages.t.Helper()

	if mmGetChatMessages.inspectFuncGetChatMessages != nil {
		mmGetChatMessages.inspectFuncGetChatMessages(ctx, id)
	}

	mm_params := ChatRepositoryMockGetChatMessagesParams{ctx, id}

	// Record call args
	mmGetChatMessages.GetChatMessagesMock.mutex.Lock()
	mmGetChatMessages.GetChatMessagesMock.callArgs = append(mmGetChatMessages.GetChatMessagesMock.callArgs, &mm_params)
	mmGetChatMessages.GetChatMessagesMock.mutex.Unlock()

	for _, e := range mmGetChatMessages.GetChatMessagesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mpa1, e.results.err
		}
	}

	if mmGetChatMessages.GetChatMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChatMessages.GetChatMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChatMessages.GetChatMessagesMock.defaultExpectation.params
		mm_want_ptrs := mmGetChatMessages.GetChatMessagesMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockGetChatMessagesParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetChatMessages.t.Errorf("ChatRepositoryMock.GetChatMessages got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatMessages.GetChatMessagesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGetChatMessages.t.Errorf("ChatRepositoryMock.GetChatMessages got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatMessages.GetChatMessagesMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChatMessages.t.Errorf("ChatRepositoryMock.GetChatMessages got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetChatMessages.GetChatMessagesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChatMessages.GetChatMessagesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChatMessages.t.Fatal("No results are set for the ChatRepositoryMock.GetChatMessages")
		}
		return (*mm_results).mpa1, (*mm_results).err
	}
	if mmGetChatMessages.funcGetChatMessages != nil {
		return mmGetChatMessages.funcGetChatMessages(ctx, id)
	}
	mmGetChatMessages.t.Fatalf("Unexpected call to ChatRepositoryMock.GetChatMessages. %v %v", ctx, id)
	return
}

// GetChatMessagesAfterCounter returns a count of finished ChatRepositoryMock.GetChatMessages invocations
func (mmGetChatMessages *ChatRepositoryMock) GetChatMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatMessages.afterGetChatMessagesCounter)
}

// GetChatMessagesBeforeCounter returns a count of ChatRepositoryMock.GetChatMessages invocations
func (mmGetChatMessages *ChatRepositoryMock) GetChatMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatMessages.beforeGetChatMessagesCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.GetChatMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Calls() []*ChatRepositoryMockGetChatMessagesParams {
	mmGetChatMessages.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockGetChatMessagesParams, len(mmGetChatMessages.callArgs))
	copy(argCopy, mmGetChatMessages.callArgs)

	mmGetChatMessages.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatMessagesDone returns true if the count of the GetChatMessages invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockGetChatMessagesDone() bool {
	if m.GetChatMessagesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetChatMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetChatMessagesMock.invocationsDone()
}

// MinimockGetChatMessagesInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockGetChatMessagesInspect() {
	for _, e := range m.GetChatMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatMessages at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetChatMessagesCounter := mm_atomic.LoadUint64(&m.afterGetChatMessagesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatMessagesMock.defaultExpectation != nil && afterGetChatMessagesCounter < 1 {
		if m.GetChatMessagesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatMessages at\n%s", m.GetChatMessagesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatMessages at\n%s with params: %#v", m.GetChatMessagesMock.defaultExpectation.expectationOrigins.origin, *m.GetChatMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChatMessages != nil && afterGetChatMessagesCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.GetChatMessages at\n%s", m.funcGetChatMessagesOrigin)
	}

	if !m.GetChatMessagesMock.invocationsDone() && afterGetChatMessagesCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.GetChatMessages at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetChatMessagesMock.expectedInvocations), m.GetChatMessagesMock.expectedInvocationsOrigin, afterGetChatMessagesCounter)
	}
}

type mChatRepositoryMockSendMessage struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockSendMessageExpectation
	expectations       []*ChatRepositoryMockSendMessageExpectation

	callArgs []*ChatRepositoryMockSendMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockSendMessageExpectation specifies expectation struct of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockSendMessageParams
	paramPtrs          *ChatRepositoryMockSendMessageParamPtrs
	expectationOrigins ChatRepositoryMockSendMessageExpectationOrigins
	results            *ChatRepositoryMockSendMessageResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockSendMessageParams contains parameters of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageParams struct {
	ctx  context.Context
	info *model.MessageInfo
}

// ChatRepositoryMockSendMessageParamPtrs contains pointers to parameters of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageParamPtrs struct {
	ctx  *context.Context
	info **model.MessageInfo
}

// ChatRepositoryMockSendMessageResults contains results of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageResults struct {
	err error
}

// ChatRepositoryMockSendMessageOrigins contains origins of expectations of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageExpectationOrigins struct {
	origin     string
	originCtx  string
	originInfo string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendMessage *mChatRepositoryMockSendMessage) Optional() *mChatRepositoryMockSendMessage {
	mmSendMessage.optional = true
	return mmSendMessage
}

// Expect sets up expected params for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Expect(ctx context.Context, info *model.MessageInfo) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.paramPtrs != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by ExpectParams functions")
	}

	mmSendMessage.defaultExpectation.params = &ChatRepositoryMockSendMessageParams{ctx, info}
	mmSendMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmSendMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSendMessage
}

// ExpectInfoParam2 sets up expected param info for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) ExpectInfoParam2(info *model.MessageInfo) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.info = &info
	mmSendMessage.defaultExpectation.expectationOrigins.originInfo = minimock.CallerInfo(1)

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Inspect(f func(ctx context.Context, info *model.MessageInfo)) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Return(err error) *ChatRepositoryMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &ChatRepositoryMockSendMessageResults{err}
	mmSendMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// Set uses given function f to mock the ChatRepository.SendMessage method
func (mmSendMessage *mChatRepositoryMockSendMessage) Set(f func(ctx context.Context, info *model.MessageInfo) (err error)) *ChatRepositoryMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the ChatRepository.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the ChatRepository.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	mmSendMessage.mock.funcSendMessageOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// When sets expectation for the ChatRepository.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mChatRepositoryMockSendMessage) When(ctx context.Context, info *model.MessageInfo) *ChatRepositoryMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	expectation := &ChatRepositoryMockSendMessageExpectation{
		mock:               mmSendMessage.mock,
		params:             &ChatRepositoryMockSendMessageParams{ctx, info},
		expectationOrigins: ChatRepositoryMockSendMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.SendMessage return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockSendMessageExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockSendMessageResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.SendMessage should be invoked
func (mmSendMessage *mChatRepositoryMockSendMessage) Times(n uint64) *mChatRepositoryMockSendMessage {
	if n == 0 {
		mmSendMessage.mock.t.Fatalf("Times of ChatRepositoryMock.SendMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendMessage.expectedInvocations, n)
	mmSendMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendMessage
}

func (mmSendMessage *mChatRepositoryMockSendMessage) invocationsDone() bool {
	if len(mmSendMessage.expectations) == 0 && mmSendMessage.defaultExpectation == nil && mmSendMessage.mock.funcSendMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendMessage.mock.afterSendMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendMessage implements mm_repository.ChatRepository
func (mmSendMessage *ChatRepositoryMock) SendMessage(ctx context.Context, info *model.MessageInfo) (err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	mmSendMessage.t.Helper()

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(ctx, info)
	}

	mm_params := ChatRepositoryMockSendMessageParams{ctx, info}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, &mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_want_ptrs := mmSendMessage.SendMessageMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockSendMessageParams{ctx, info}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.info != nil && !minimock.Equal(*mm_want_ptrs.info, mm_got.info) {
				mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameter info, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originInfo, *mm_want_ptrs.info, mm_got.info, minimock.Diff(*mm_want_ptrs.info, mm_got.info))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the ChatRepositoryMock.SendMessage")
		}
		return (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(ctx, info)
	}
	mmSendMessage.t.Fatalf("Unexpected call to ChatRepositoryMock.SendMessage. %v %v", ctx, info)
	return
}

// SendMessageAfterCounter returns a count of finished ChatRepositoryMock.SendMessage invocations
func (mmSendMessage *ChatRepositoryMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of ChatRepositoryMock.SendMessage invocations
func (mmSendMessage *ChatRepositoryMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mChatRepositoryMockSendMessage) Calls() []*ChatRepositoryMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockSendMessageDone() bool {
	if m.SendMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMessageMock.invocationsDone()
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendMessageCounter := mm_atomic.LoadUint64(&m.afterSendMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && afterSendMessageCounter < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s", m.SendMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s with params: %#v", m.SendMessageMock.defaultExpectation.expectationOrigins.origin, *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && afterSendMessageCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s", m.funcSendMessageOrigin)
	}

	if !m.SendMessageMock.invocationsDone() && afterSendMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.SendMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMessageMock.expectedInvocations), m.SendMessageMock.expectedInvocationsOrigin, afterSendMessageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddUsersToChatInspect()

			m.MinimockCreateChatInspect()

			m.MinimockDeleteChatInspect()

			m.MinimockGetChatMessagesInspect()

			m.MinimockSendMessageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddUsersToChatDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockDeleteChatDone() &&
		m.MinimockGetChatMessagesDone() &&
		m.MinimockSendMessageDone()
}
